@page "/content"
@using Open_MediaServer
@using Open_MediaServer.Database.Schema
@using Open_MediaServer.Utils
@using SQLiteNetExtensionsAsync.Extensions
@model Open_MediaServer.Frontend.Pages.Content

@{
    Layout = "_Layout.cshtml";

    DatabaseSchema.User user = null;
    if (Request.Cookies["user_session"] != null && UserUtils.IsAuthed(Request.Cookies["user_session"]))
    {
        user = await UserUtils.GetUser(Request.Cookies["user_session"]);
    }
}

@section AdditionalHead
{
    <title>@Program.ConfigManager.Config.FrontendName Media - Content</title>
    <link rel="stylesheet" href="~/Frontend/Assets/css/Content/Content.css">
    <script src="~/Frontend/Assets/js/Content/Content.js"></script>
}

<!DOCTYPE html>

<html lang="en">
@{
    if (user != null)
    {
        <text>@Html.Raw($@"<body ondrop='dropHandler(event, ""{Url.Action("PostUploadContentForm", "MediaApi")}"");' ondragover=""dragOverHandler(event);"">")</text>
    }
    else
    {
        <text>@Html.Raw(@"<body>")</text>
    }
}
<div class="sort-navbar">
    <a class="sort-item
    @{ 
        if (ContentUtils.IsSelectedFromSortQuery(Request.Query, "name")) {
            <text>sort-item-selected</text>
        }
    }
    " onclick="updateQueryURL('name', window);">
        Name
    </a>
    <a class="sort-item
    @{
        if (ContentUtils.IsSelectedFromSortQuery(Request.Query, "author")) {
            <text>sort-item-selected</text>
        }
    }
    " onclick="updateQueryURL('author', window);">
        Author
    </a>
    <a class="sort-item
    @{
        if (ContentUtils.IsSelectedFromSortQuery(Request.Query, "date")) {
            <text>sort-item-selected</text>
        }
    }
    " onclick="updateQueryURL('date', window);">
        Date
    </a>
    <a class="sort-item
    @{
        if (ContentUtils.IsSelectedFromSortQuery(Request.Query, "type")) {
            <text>sort-item-selected</text>
        }
    }
    " onclick="updateQueryURL('type', window);">
        Type
    </a>
    <a class="sort-item
    @{
        if (ContentUtils.IsSelectedFromSortQuery(Request.Query, "size")) {
            <text>sort-item-selected</text>
        }
    }
    " onclick="updateQueryURL('size', window);">
        Size
    </a>
    @{
        if (user != null)
        {
            <a class="sort-item
            @{
                if (ContentUtils.IsSelectedFromSortQuery(Request.Query, "visibility")) {
                    <text>sort-item-selected</text>
                }
            }
            " onclick="updateQueryURL('visibility', window);">
                Visibility
            </a>
        }
    }
</div>
<div class="content-container">
    @{
        var mediaList = await Program.Database.MediaDatabase.GetAllWithChildrenAsync<DatabaseSchema.Media>();

        if (user == null || user is {Admin: false })
        {
            mediaList.RemoveAll(media =>
            {
                if (user != null && media.AuthorId == user.Id)
                {
                    return false;
                }
                return media.Public == false;
            });
        }

        if (mediaList.Count <= 0)
        {
            <div class="main-text">
                This server has no content associated with it.
            </div>
        }
        else
        {
            mediaList = mediaList.SortMediaFromQuery(Request.Query);
            foreach (var media in mediaList)
            {
                <div class="content-item">
                    <a class="content-href" href="/@media.Id/@media.Name@media.Extension" draggable="false">
                        @{
                            var author = await Program.Database.UserDatabase.FindAsync
                                <DatabaseSchema.User>(dbUser => dbUser.Id == media.AuthorId);
                            if (media.ThumbnailPath != null)
                            {
                                <img class="content-item-thumbnail" src="@Url.Action("GetThumbnail", "MediaApi", new {Id = media.Id, Name = media.Name}, Request.Scheme, Program.ConfigManager.Config.FrontendDomain)" 
                                     alt="@media.Name" draggable="false"/>
                                <div class="content-item-text">
                                    @Uri.UnescapeDataString(media.Name).FirstCharToUpper()<br/>
                                    @{
                                        <div>
                                            @(media.Public ? "Public" : "Private") • @StringUtils.FormatBytesWithIdentifier(media.ContentSize)<br/>
                                            @(author.Username.FirstCharToUpper() ?? "Account Deleted") • @media.UploadDate.ToFormattedString()
                                            </div>
                                    }
                                    </div>
                            }
                            else
                            {
                                <div class="content-item-no-thumbnail">
                                    No Thumbnail Available
                                </div>
                                <div class="content-item-text">
                                    @Uri.UnescapeDataString(media.Name).FirstCharToUpper()<br/>
                                    @{
                                        <div>
                                            @(media.Public ? "Public" : "Private") • @StringUtils.FormatBytesWithIdentifier(media.ContentSize)<br/>
                                            @(author.Username.FirstCharToUpper() ?? "Account Deleted") • @media.UploadDate.ToFormattedString()
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </a>
                </div>
            }
        }
    }
</div>
@Html.Raw("</body>")
</html>